import pandas as pd
import matplotlib.pyplot as plt

# Dati del dataset
data = [
    ['Paxillus Family', 'Brown Roll-rim', 'p', '[7, 15]', '[x, f, s]', '[t]', '[r, n]', '[t]', '[d]', '[c]', '[n]', '[4, 8]', '[10, 20]', '', '', '[n]', '', '', '[f]', '[f]', '', '[h, d]', '[u, a]'],
    ['Paxillus Family', 'Velvet Roll-rim', 'p', '[8, 25]', '[f, s]', '[d, k, s]', '[n]', '[f]', '[d]', '[c]', '[y]', '[4, 8]', '[20, 50]', '', '', '[k]', '[k, n]', '', '[f]', '[f]', '', '[d]', '[u, a]'],
    ['Paxillus Family', 'False Chanterelle', 'p', '[3, 8]', '[s]', '[d]', '[o, y]', '[f]', '[d]', '[c]', '[o, y]', '[2, 5]', '[5, 8]', '', '', '[o, y]', '', '', '[f]', '[f]', '', '[h, d]', '[u, a]']
]

# Intestazioni delle colonne
columns = [
    'family', 'name', 'class', 'cap-diameter', 'cap-shape', 'Cap-surface', 'cap-color', 'does-bruise-or-bleed', 
    'gill-attachment', 'gill-spacing', 'gill-color', 'stem-height', 'stem-width', 'stem-root', 'stem-surface', 
    'stem-color', 'veil-type', 'veil-color', 'has-ring', 'ring-type', 'Spore-print-color', 'habitat', 'season'
]

# Crea il DataFrame
df = pd.DataFrame(data, columns=columns)

# Dizionario per mappare i valori abbreviati a quelli descritti
class_dict = {'p': 'poisonous', 'e': 'edible'}
cap_shape_dict = {'b': 'bell', 'c': 'conical', 'x': 'convex', 'f': 'flat', 's': 'sunken', 'p': 'spherical', 'o': 'others'}
cap_surface_dict = {'i': 'fibrous', 'g': 'grooves', 'y': 'scaly', 's': 'smooth', 'h': 'shiny', 'l': 'leathery', 'k': 'silky', 't': 'sticky', 'w': 'wrinkled', 'e': 'fleshy'}
cap_color_dict = {'n': 'brown', 'b': 'buff', 'g': 'gray', 'r': 'green', 'p': 'pink', 'u': 'purple', 'e': 'red', 'w': 'white', 'y': 'yellow', 'l': 'blue', 'o': 'orange', 'k': 'black'}
bruise_dict = {'t': 'bruises', 'f': 'no bruises'}
gill_attachment_dict = {'a': 'adnate', 'x': 'adnexed', 'd': 'decurrent', 'e': 'free', 's': 'sinuate', 'p': 'pores', 'f': 'none', '?': 'unknown'}
gill_spacing_dict = {'c': 'close', 'd': 'distant', 'f': 'none'}
stem_root_dict = {'b': 'bulbous', 's': 'swollen', 'c': 'club', 'u': 'cup', 'e': 'equal', 'z': 'rhizomorphs', 'r': 'rooted'}
stem_surface_dict = {'i': 'fibrous', 'g': 'grooves', 'y': 'scaly', 's': 'smooth', 'h': 'shiny', 'l': 'leathery', 'k': 'silky', 't': 'sticky', 'w': 'wrinkled', 'e': 'fleshy', 'f': 'none'}
stem_color_dict = {'n': 'brown', 'b': 'buff', 'g': 'gray', 'r': 'green', 'p': 'pink', 'u': 'purple', 'e': 'red', 'w': 'white', 'y': 'yellow', 'l': 'blue', 'o': 'orange', 'k': 'black', 'f': 'none'}
veil_type_dict = {'p': 'partial', 'u': 'universal'}
has_ring_dict = {'t': 'has ring', 'f': 'no ring'}
ring_type_dict = {'c': 'cobwebby', 'e': 'evanescent', 'r': 'flaring', 'g': 'grooved', 'l': 'large', 'p': 'pendant', 's': 'sheathing', 'z': 'zone', 'y': 'scaly', 'm': 'movable', 'f': 'none', '?': 'unknown'}
spore_print_color_dict = {'n': 'brown', 'b': 'buff', 'g': 'gray', 'r': 'green', 'p': 'pink', 'u': 'purple', 'e': 'red', 'w': 'white', 'y': 'yellow', 'l': 'blue', 'o': 'orange', 'k': 'black'}
habitat_dict = {'g': 'grasses', 'l': 'leaves', 'm': 'meadows', 'p': 'paths', 'h': 'heaths', 'u': 'urban', 'w': 'waste', 'd': 'woods'}
season_dict = {'s': 'spring', 'u': 'summer', 'a': 'autumn', 'w': 'winter'}

# Funzione per sostituire i valori abbreviati con i valori completi
def map_column_values(df, column, mapping_dict):
    return df[column].apply(lambda x: [mapping_dict.get(i.strip(), i.strip()) for i in x.strip('[]').split(',')] if isinstance(x, str) else [mapping_dict.get(x.strip(), x.strip())])

# Mappare tutte le colonne
df['class'] = df['class'].map(class_dict)
df['cap-shape'] = map_column_values(df, 'cap-shape', cap_shape_dict)
df['Cap-surface'] = map_column_values(df, 'Cap-surface', cap_surface_dict)
df['cap-color'] = map_column_values(df, 'cap-color', cap_color_dict)
df['does-bruise-or-bleed'] = df['does-bruise-or-bleed'].map(bruise_dict)
df['gill-attachment'] = map_column_values(df, 'gill-attachment', gill_attachment_dict)
df['gill-spacing'] = df['gill-spacing'].map(gill_spacing_dict)
df['stem-root'] = df['stem-root'].map(stem_root_dict)
df['stem-surface'] = map_column_values(df, 'stem-surface', stem_surface_dict)
df['stem-color'] = map_column_values(df, 'stem-color', stem_color_dict)
df['veil-type'] = df['veil-type'].map(veil_type_dict)
df['has-ring'] = df['has-ring'].map(has_ring_dict)
df['ring-type'] = map_column_values(df, 'ring-type', ring_type_dict)
df['spore-print-color'] = map_column_values(df, 'Spore-print-color', spore_print_color_dict)
df['habitat'] = df['habitat'].map(habitat_dict)
df['season'] = df['season'].map(season_dict)

# Rimuoviamo le parentesi quadre e virgolette per le celle vuote
df = df.applymap(lambda x: ', '.join(x) if isinstance(x, list) else x)
df = df.replace('', 'No data')

# Selezioniamo solo le prime 10 colonne
df_subset = df.iloc[:, :10]

# Visualizza la tabella in formato immagine con risoluzione migliorata
plt.figure(figsize=(18, 6))  # Allargamento della figura per colonne più larghe
plt.axis('off')  # Nascondi l'asse
# Mostriamo solo le prime 10 colonne con larghezza personalizzata
col_widths = [0.1] * len(df_subset.columns)  # Aumenta la larghezza delle colonne
table = plt.table(cellText=df_subset.values, colLabels=df_subset.columns, cellLoc='center', loc='center', colColours=['#f2f2f2']*len(df_subset.columns), colWidths=col_widths)

# Impostiamo una dimensione maggiore per i caratteri della tabella
table




import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Carica il dataset (modifica il percorso del file se necessario)
data = pd.read_csv("/Users/Sofia/Desktop/MushroomDataset 2/secondary_data.csv", delimiter=';')

# Codifica la variabile "class" come numerica
label_encoder = LabelEncoder()
data['class_encoded'] = label_encoder.fit_transform(data['class'])

# Codifica tutte le variabili categoriche come numeriche
encoded_data = data.copy()
for column in data.columns:
    if data[column].dtype == 'object':  # Verifica se la variabile è categorica
        encoded_data[column] = LabelEncoder().fit_transform(data[column])

# Calcola le correlazioni tra "class_encoded" e tutte le altre variabili
correlations = encoded_data.corr()['class_encoded'].sort_values(ascending=False)

# Stampa tutte le correlazioni
print("Correlazioni con 'class':")
print(correlations)

